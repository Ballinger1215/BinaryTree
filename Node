package binarytree;

/**
 *
 * @author Mark
 */
public class BinaryTree {

    Node root;
    
    public void add(int data)
    {
        Node nodeToAdd = new Node(data);
        
        if (root == null)
            root = nodeToAdd;
        
        addNode(root, nodeToAdd);
    }   
        private void addNode (Node node, Node nodeToAdd)
        {
             if (nodeToAdd.data < node.data)
            {
                if (node.leftChild == null)
                {
                    node.leftChild = nodeToAdd;
                }else{
                    addNode(node.leftChild, nodeToAdd);
                     }
            }
             else if (nodeToAdd.data > node.data)
             {
               if (node.rightChild == null)
                {
                    node.rightChild = nodeToAdd;
                }else{
                    addNode(node.rightChild, nodeToAdd);
                }
             }
        }
    public void traverse()
    {
          //pre-order traversal  // post-order traversal
        if (root != null)
        {
          Node nodeToTraverse = root;
          if(nodeToTraverse.leftChild == null && nodeToTraverse.rightChild == null)
          {
              System.out.println(nodeToTraverse.data);
          }else{
                    if(nodeToTraverse.leftChild != null)
                    {
                        inOrderTraversal(nodeToTraverse.leftChild);
                    }
                    if (nodeToTraverse.rightChild != null)
                    {
                        inOrderTraversal(nodeToTraverse.rightChild);
                    }
                }
        } 
    }
     private void inOrderTraversal(Node node)     // in-order traversal
    {
          if(node.leftChild != null)
          {
              inOrderTraversal(node.leftChild);
          }
          System.out.println(node.data);
          
          if(node.rightChild != null)
          {
              inOrderTraversal(node.rightChild);
          }
    } 
     public void traversePreOrder()
    {
          //pre-order traversal  // post-order traversal
        if (root != null)
        {
          Node nodeToTraverse = root;
          if(nodeToTraverse.leftChild == null && nodeToTraverse.rightChild == null)
          {
              System.out.println(nodeToTraverse.data);
          }else{
                    if(nodeToTraverse.leftChild != null)
                    {
                        preOrderTraversal(nodeToTraverse.leftChild);
                    }
                    if (nodeToTraverse.rightChild != null)
                    {
                        preOrderTraversal(nodeToTraverse.rightChild);
                    }
                }
        } 
    }
     private void preOrderTraversal(Node node)     // in-order traversal
    {
         System.out.println(node.data);
         
          if(node.leftChild != null)
          {
              preOrderTraversal(node.leftChild);
          }

          if(node.rightChild != null)
          {
              preOrderTraversal(node.rightChild);
          }
    }
     
      private boolean lookup(Node node, int data) {
            if (node == null) {
              return(false);
            }

            if (data == node.data) {
              return(true);
            }
            else if (data < node.data) {
              return(lookup(node.leftChild, data));
            }
            else {
              return(lookup(node.rightChild, data));
            }
          }
      
      public int size() {
        return(size(root));
      }

      private int size(Node node) {
        if (node == null) return(0);
        else {
          return(size(node.leftChild) + 1 + size(node.rightChild));
        }
      }

    
    public static void main(String[] args) 
    {
        
    }
    
}
